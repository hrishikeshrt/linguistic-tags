/* ------------------------------------------------------------------------- */

String.prototype.toTitleCase = function(){
    return this.replace("_", " ").replace(/(?:^|\s)\w/g, function(match) {
        return match.toUpperCase();
    });
};

/* ------------------------------------------------------------------------- */
// Render Table

function cell_style(value, row, index) {
    return {classes: 'context-cell'};
}

function render_table($parent, table_data, options, dataset = {}, download_name = 'result') {
    // table_data.headers contains list of header fields
    // each field being a JSON object
    // {title: "display_name", field: "field_name", switchable: bool, sortable: bool, searchable: bool, visible: bool, ...}
    // https://bootstrap-table.com/docs/api/column-options/
    // key-value pairs of dataset are added as ".data()" attributes on $table

    // table_data.rows contains list of rows
    // each row being a JSON object {field_name: field_value}

    $parent.empty();
    console.log(table_data);

    const $table  = $("<table />", {class: "table table-hover"});
    $parent.append($table);
    for (const column of table_data.columns) {
        column.cellStyle = cell_style;
    }

    $table.bootstrapTable({
        columns: table_data.columns,
        search: false,
        searchHighlight: true,
        showColumns: true,
        stickyHeader: true,
        stickyHeaderOffsetLeft: 0,
        stickyHeaderOffsetRight: 0,
        resizable: true,
        pagination: false,
        showToggle: false,
        detailView: false,
        showExport: true,
        exportTypes: ['csv', 'json', 'txt', 'excel'],
        exportOptions: {
            fileName: function () {
                return download_name
            }
        },
        data: table_data.rows
    });
    $table.bootstrapTable('refreshOptions', options);
    for (const [data_key, data_value] of Object.entries(dataset)) {
        $table.data(data_key, data_value);
    }

    // Attach Context Menu
    // (Note: Menu items are defined in comment.js)
    attach_context_menu(".context-cell", [
        cell_actions_header_menu_item,
        add_comment_menu_item,
    ]);

    /* --------------------------------------------------------------------- */
}

/* ------------------------------------------------------------------------- */
// Context-js

function attach_context_menu(css_selector, menu_options) {
    // NOTE: `context` is a special object defined in Context.js
    // NOTE: Menu options should be compatible with Context.js Options
    // These options should be generated by other JS functions that call this function.
    context.attach(css_selector, menu_options);
}

/* ------------------------------------------------------------------------- */